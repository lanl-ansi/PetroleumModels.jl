var documenterSearchIndex = {"docs":
[{"location":"math-model/#The-PetroleumModels-Mathematical-Model","page":"Mathematical Model","title":"The PetroleumModels Mathematical Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"As PetroleumModels implements a variety of petroleum network optimization problems, the implementation is the best reference for precise mathematical formulations.  This section provides a mathematical specification for a prototypical Petroleum Optimal Flow problem, to provide an overview of the typical mathematical models in PetroleumModels.","category":"page"},{"location":"math-model/#Steady-State-Petroleum-Flow","page":"Mathematical Model","title":"Steady State Petroleum Flow","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"PetroleumModels implements a steady-state model of petroleum flow based on the Bernoulli equations using the Leibenzon relationship that is based on the 1-D hydrodynamic equations for petroleum gas flow in a pipe. In the following paragraphs, a derivation of the steady state equations used in PetroleumModels is shown. To that end, we first assume that the flow is steady. Given this assumption, the mechanical energy conservation equation for the flow of petroleum in a pipe is given by","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"fracd prho + lambda fracdxDfracu^22 + d fracu^22 + gdz = 0","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where rho is pressure, lambda is the hydraulic resistance, u is the flow velocity, and D is the diameter of the pipe. Because the fluid is weakly compressible and homogeneous, rho is roughly constant and d pd x = 0. Since the pipe diameter is constant, the velocity, u(x), of the fluid is also constant throughout the pipe. In the steady-state equation, the value of d prho represents the work of a unit of mass of fluid moving along the area dx. This work overcomes the resistive frictional forces of turbulence, the change in fluid kinetic energy, and the lifting of fluid over a height difference, Delta z. After integrating the equation of mechanical energy conservation along the length of the pipe, L, the relationship between endpoint pressure variables p(0) and p(L) and the flow velocity u is given by","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"fracp(0) - p(L)rho g = lambda fracLDfracu^22g+Delta z","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"The values h(0)equiv p(0)(rho g) and h(L)equiv p(L)(rho g) denote the heights the liquid is lifted to under the pressures p(0) and p(L) at either end of the pipe. The value h is referred to as head.  A general equation that is used to determine the coefficient of hydraulic resistance lambda is given as follows:","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"lambda = fracARe^m","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where A is the cross-sectional area of the pipe and m is a Reynolds constant corresponding to the fluid motion regime. Using Re = 4q(pi D nu), where q is the volumetric flow rate and nu is the petroleum kinematic viscosity, we Leibenzon formula is obtained [1]","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"102  beta fracq^2-m nu^m D^5-m","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"For turbulent flow in smooth pipes, parameters of m = 0.25 and beta = 0.0246 (friction factor) is often used. However, the parameter m can be adjusted to reflect the laminarization effects of anti-turbulent drag reduction additives that are widely used to facilitate petroleum transport. Given these relationships the total head loss between the ends (ij) of a pipe is equal to the sum of losses caused by friction and the head difference arising from pipeline elevation.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"h_i - h_j = z_j - z_i + 102 beta_ij fracq_ij^2-m nu^mD_ij^5-m L_ij   ","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where z is the elevation of the pipe on either end.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"To create a better numerically conditioned problem, it is very useful to non-dimensionalize the units. Here we use a typical head h_0 and a typical volumetric flow q_0 and normalize the equations. This yields","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"  tildeh_i - tildeh_j = tildez_j - tildez_i + 102 beta_ij fractildeq_ij^2-m nu^m D_ij^5-m L_ij * fracq_0p_0","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where tildeq=fracqq_0, tildez=fraczh_0, and tildeh=frachh_0 are the dimensionless volumetric flow and head, respectively, and are both of order one. While not strictly necessary in steady-state formulations, length, L, can also be made non dimensional in a similar way and is often useful for transient modeling. For notational convenience, the non-dimensionalization constants and pipeline constants (diameter, length, etc.) can be lumped as a single constant resistance, gamma=frac102 beta nu^m L q_0D^5-m h_0 yielding a non dimensional equation of the form","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"  tildeh_i - tildeh_j = tildez_j - tildez_i + gamma_ij tildeq_ij^2-m","category":"page"},{"location":"math-model/#Steady-State-Pump-Flow","page":"Mathematical Model","title":"Steady State Pump Flow","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"In liquid pipeline transportation, the flow of the commodity through the system is managed by pumping machinery, which is located at pumping stations throughout the system. PetroleumModels uses a simple relationships between a minimal set of physical and mechanical variables that describe the relationship between rotation frequency, pump efficiency, and flow. The dependence of pump efficiency on flow at nominal rotational speed is modeled by a pump-specific characteristic curve eta = f(Q). This curve is often approximated analytically using the quadratic function","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta^pump = b_0+b_1 q+b_2 q^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where b_0, b_1, and b_2 are approximation coefficients obtained by the least squares method and q is the flow rate through the pump. We use affinity Laws to define the pump efficiency. The values of the actual and nominal flow rates q and q^nom and heads h and h^nom when operating at actual and nominal rotational pump speeds omega and omega^nom, respectively, are related by the ratios","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nfracqq^nom = fracomegaomega^nom \nfrachh^nom = left(fracomegaomega^nomright)^2\nendalign","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Thus, pump efficiency as a function of rotational speed is then written as","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta^pump = b_0+b_1fracq^nomomega^nomomega+b_2left( fracq^nomomega^nomright)^2omega^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"The laws of affinity require the use of a nominal point on the curve to determine the new rotational speed. PetroleumModels uses the equation given by [2] to provide an analytical relationship between actual and nominal rotational speeds omega and omega^nom and corresponding efficiencies eta and eta^nom:","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta = 1  (1 - eta^nom)left(fracomega^nomomegaright)^01","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Therefore, for large pumps the change in efficiency can be neglected if the frequency is within 33\\% of its nominal value. However, this does not mean the pump will perform at the same efficiency when installed in the pipeline system, because the operating point is determined by the intersection of the pump curve with the system curve. Thus, we model the dependence of pump efficiency on flow at a constant speed using a second-degree polynomial [3]:","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta^pump = b_1 q^nom-b_2 (q^nom)^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"which is rewritten as","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta^pump = 2fraceta^nomq^nomq-fraceta^nom(q^nom)^2q^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where eta^nom = b_1^2(4b_2) and q^nom = b_1(2b_2). It follows that the dependence of efficiency on the actual flow rate can be approximated with","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta^pump = 2fraceta^nomq^nomq fracomega^nomomega-fraceta^nom(q^nom)^2q^2 left(fracomega^nomomegaright)^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"This equation is transformed using the technique of completing the square to yield","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"eta^pump = eta^nom - left(q - q^nomfracomegaomega^nomright)^2 cdot fraceta^nom(q^nom)^2 cdot left(fracomega^nomomegaright)^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Thus, by modulating the power applied to a pump (ij)in mathcal E_p, it is possible to make the engine drive shaft rotational speed omega_ij lower or higher than a nominal value omega_ij^nom. The relationship between the drive frequency, head difference, and through flow for a variable frequency drive pump can then be approximated by equations","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginalign\nh_j - h_i  = alpha_ij^0 left(fracomega_ijomega_ij^nomright)^2 - alpha_ij^1 Q_ij^2\neta_ij  = eta_ij^nom - left(fracq_ijq_ij^nom - fracomega_ijomega_ij^nomright)^2 eta_ij^nom left(fracomega_ij^nomomega_ijright)^2\nendalign","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"where a_ij^0 and a_ij^1 are constant parameters and  q_ij^nom, omega_ij^nom, and eta_ij^nom are nominal values of flow rate, drive shaft frequency, and pumping efficiency, respectively.","category":"page"},{"location":"math-model/#Steady-State-Mathematical-Model","page":"Mathematical Model","title":"Steady State Mathematical Model","text":"","category":"section"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"A complete petroleum flow mathematical model is the defined by","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"beginaligned\ntextsets \n N  textjunctions \n A^p  textpipes  \n A^u  textpumps  \n A = A^p cup A^u  textedges   \n P P_i  textproducers and producers at junction i   \n C C_i  textconsumers and consumers at junction i    \n\ntextdata \n gamma_a  textlumped resistance factor of pipeline a \n ql_j  textconsumption (mass flow) at consumer j \n qg_j  textproduction (mass flow) at producer j \n underlineq_a=1 overlineq_a  textlimits on volumetric flow of edge a \n underlineeta_a=1 overlineeta_a  textlimits on efficiency of pump a \n underlinew_a=1 overlinew_a  textlimits on rotation of pump a \n underlineh_i ge 0overlineh_i  textlimits on head at node i \n underlineh_a ge 0overlineh_a  textlimits on head at pump a \n\ntextvariables \n h_i  texthead at node i \n q_a  textvolumetric flow on edge a \n eta  textefficiency of pump a\n w  textrotation speed of pump a\n\ntextconstraints \n (h_i - h_j) = z_j - z_i + gamma_a q_a^2-m textHydraulic equation for pipe a \n textconnected from junction i to junction j  \nsumlimits_a=a_ijin A q_a - sumlimits_a=a_ji in A q_a = sum_j in P_i qg_j- sum_j in C_i ql_j  textvolumetric flow balance at junction i \n h_i - h_j = alpha_a^0 left(fracomega_aomega_a^nomright)^2 - alpha_a^1 q_ij^2  texthead boost at pump a \n textconnected from junction i to junction j  \neta_a  = eta_a^nom - left(fracq_aQ_a^nom - fracomega_aomega_a^nomright)^2 eta_a^nom left(fracomega_a^nomomega_aright)^2  textefficiency of pump q \n textconnected from junction i to junction j  \nunderlineh_i leq h_i leq overlineh_i  texthead limits at junction i \nunderlineomega_a leq omega_a leq overlineomega_a  textrotation limits at pump a \nunderlineeta_a leq eta_a leq overlineeta_a  textefficiency limits at pump a \nunderlineh_a leq h_j - h_i leq overlineh_a  texthead difference limits at pump a \n textconnected from junction i to junction j  \nunderlineq_a leq q_a leq overlineq_a  textflow limits at edge a \nendaligned","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"most of the optimization models of PetroleumModels are variations of this formulation.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"SI Units for various parameters","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"Parameter Description SI Units\nD Pipe Diameter m\nL Pipe Length m\nA Pipe Area Cross Section m^2\nh Petroleum Head m\nrho Petroleum Density kg/m^3\nq Petroleum Volumetric Flow m^3/s\neta Pump efficiency none\nomega Pump rotation rotations per second\nnu Petroleum Viscosity m^2/s\ng Gravity m/s^2","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"[1] Y. Kuzminskii, S. Shilko, V. Vyun. Mathematical modeling of effect of the anti-turbulent additives on flow rate of oil-pipeline section. Journal of Friction and Wear, 25(3):7–12, 2004.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"[2] I. Sárbu, I. Borza. Energetic optimization of water pumping in distribution systems. Periodica Polytechnica Mechanical Engineering, 42(2):141–152, 1998.","category":"page"},{"location":"math-model/","page":"Mathematical Model","title":"Mathematical Model","text":"[3] V. Grishin, A. Grishin. The efficiency of frequency-regulated electric pump. Automation and Informatization of electrified agricultural production. Scientific papers (inRussian). 89:118–127, 2004.","category":"page"},{"location":"data-format/#MatlabPetroleum-Format-(.m)","page":"Input Data Formats","title":"MatlabPetroleum Format (.m)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Here we detail the parameters that can be inputted using the matpetroleum format. They can be inputted in the order they appear here, or selectively, in the case where some data is not required, by using the following (example) header format.","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"%% junction data\n% junction_i type head_min head_max elevation status","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"See case files in test/data/ for examples of file syntax.","category":"page"},{"location":"data-format/#Junctions-(mpc.junction)","page":"Input Data Formats","title":"Junctions (mpc.junction)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"These components model “point” locations in the system, i.e. locations of withdrawal or injection, or simply connection points between pipes. Each junction may have multiple pipes attached.","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Parameter Type Name Standard Units (SI) United States Customary Units Required Description\njunction_i Int Junction id   Y Unique id for junctions\ntype Int Junction Type   Y Classification of the junction: 0 = standard node, 1 = slack node\nhead_min Float64 Head Minimum m ft Y Minimum operating head used in line pack calculations, which is higher than the minimum allowable\nhead_max Float64 Head Maximum m ft Y Maximum operating head used in line pack calculations, which is lower than the maximum allowable\nelevation Float64 Elevation m ft  Elevation of the junction\nstatus Int Junction Status   Y Determines if the component is active in the model","category":"page"},{"location":"data-format/#Pipes-(mpc.pipe)","page":"Input Data Formats","title":"Pipes (mpc.pipe)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"These components model pipelines which connect two junctions.","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Parameter Type Name Standard Units (SI) United States Customary Units Required Description\npipeline_i Int Pipe id   Y Unique id for pipes\nfr_junction Int From Junction id   Y Unique id of the junction on the from side\nto_junction Int To Junction id   Y Unique id of the junction on the to side\ndiameter Float64 Diameter m ft Y Pipe diameter\nlength Float64 Length m ft Y Pipe Length\nfiction_factor Float64 Friction coefficient s2/m s2/ft  Coefficient in the Leibenzon equation for turbulent flow\nflow_min Float64 Flow Rate Minimum m3/s ft3/h Y Minimum allowable operating flow rate, usually depends on pipe diameter\nflow_max Float64 Flow Rate Maximum m3/s ft3/h Y Maximum allowable operating flow rate, usually depends on pipe diameter\nstatus Int Pipe status   Y Determines if the component is active in the model","category":"page"},{"location":"data-format/#Pumps-(mpc.pump)","page":"Input Data Formats","title":"Pumps (mpc.pump)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"These components model infrastructure used to boost pressure between two nodes.","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Parameter Type Name Standard Units (SI) United States Customary Units Required Description\npump_i Int Pump id   Y Unique id for pump\nfr_junction Int From Junction id   Y Unique id of the junction on the from side\nto_junction Int To Junction id   Y Unique id of the junction on the to side\nstation_i Int Pump station id   Y Unique id of the station including up to 3 pumps\nrotation_coefficient Float64 Pump rotation coefficient m ft Y Pump coefficient required to define pump head\nflow_coefficient Float64 Pump flow coefficient s2/m5 h2/ft5 Y Pump coefficient required to define pump head\nflow_nom Float64 Nominal flow rate m3/s ft3/h Y Pump nominal flow rate\nflow_max Float64 Maximum flow rate m3/s ft3/h Y Pump maximum flow rate\ndeltaheadmax Float64 Maximum head difference m ft Y Maximum pump head difference\ndeltaheadmin Float64 Minimum head difference m ft Y Minimum pump head difference\npumpefficiencymin Float64 Minimum pump efficiency   Y Minimum pump efficiency inlet\npumpefficiencymax Float64 Maximum pump efficiency   Y Maximum pump efficiency inlet\nrotation_nom Int Nominal rotational speed rotations/s rotations/minute Y Nominal pump rotational speed\nrotation_min Int Minimum rotational speed rotations/s rotations/minute Y Minimum pump rotational speed\nrotation_max Int Maximum rotational speed rotations/s rotations/minute Y Maximum pump rotational speed\nelectricity_price Float64 Electricity price $/(kW*s) $/(kW*h) Y Electricity price for every pump maintain\nstatus Int Pump status   Y Determines if the component is active in the model\nelectricmotorefficiency Float64 Efficiency of the pump's motor   Y Pump constant for computing pump efficiency\nmechanicaltransmissionefficiency Float64 Efficiency of the pump's transmission   Y Pump constant for computing pump efficiency","category":"page"},{"location":"data-format/#Producers-(mpc.producer)","page":"Input Data Formats","title":"Producers (mpc.producer)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"These components model producers of product.","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Parameter Type Name Standard Units (SI) United States Customary Units Required Description\nproducer_i Int producer id   Y Unique id for producer\njunction_id Int Junction id   Y Unique id of Junction to which component is connected\ninjection_min Float64 Minimum injection m3/s ft3/h Y Minimum flow rate that can be injected\ninjection_max Float64 Maximum Injection m3/s ft3/h Y Maximum flow rate that can be injected\nqg Float64 Fixed flow rate m3/s ft3/h Y Producer flow rate if it's fixed\nstatus Int producer status   Y Determines if the component is active in the model\nis_dispatchable Int Dispatchable   Y If the component is marked as dispatchable, it means that it can vary its injection between its minimum and maximum. If not, then the component is injecting exactly at the fixed injection rate\noffer_price Float64 Offer Price $/m3 $/ft3  Offer price","category":"page"},{"location":"data-format/#Consumers-(mpc.consumer)","page":"Input Data Formats","title":"Consumers (mpc.consumer)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Parameter Type Name Standard Units (SI) United States Customary Units Required Description\nconsumer_i Int consumer id   Y Unique id for consumer\njunction_id Int Junction id   Y Unique id of Junction to which component is connected\nwithdrawal_min Float64 Minimum Withdrawal m3/s ft3/h Y Minimum flow rate that can be withdrawn\nwithdrawal_max Float64 Maximum Withdrawal m3/s ft3/h Y Maximum flow rate that can be withdrawn\nql Float64 Fixed flow rate m3/s ft3/h Y Consumer flow rate if it's fixed\nstatus Int consumer status   Y Determines if the component is active in the model\nis_dispatchable Int Dispatchable   Y If the component is marked as dispatchable, it means that it can vary its withdrawal between its minimum and maximum. If not, then the component is withdrawal_nominal exactly at the fixed flow rate\nbid_price Float64 Bid Price $/m3 $/ft3  Bid price","category":"page"},{"location":"data-format/#Network-Parameters-(mpc.*parameter*)","page":"Input Data Formats","title":"Network Parameters (mpc.parameter)","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"Parameter Type Name Standard Units (SI) United States Customary Units Required Description\ndensity Float64 Density kg/m3 lbm/ft3  Liquid density\nviscosity Float64 Viscosity m s2/s ft2/s  Liquid kinematic viscosity\ngravitational_acceleration Float64 Gravity m/s2 ft/s2  Gravitational acceleration\nbase_head Float64 Base Head m ft  Base head\nbase_length Float64 Base Length m ft  Base length\nbase_flow Float64 Base Flow Rate m3/s ft3/h  Base flow rate\nunits String Units    'si' for standard units or 'usc' for United States customary units\nisperunit Int Per-unit    If data is already in per-unit (non-dimensionalized)","category":"page"},{"location":"data-format/#Matlab-extensions","page":"Input Data Formats","title":"Matlab extensions","text":"","category":"section"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"The matlab format supports extensions which allow users to define arbitrary components and data which are used in customized problems and formulations. For example, the syntax","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"  %column_names% data_field_name1, data_field_name2, ...\n  mpc.component_data = [\n  data1, data2\n  data1, data2\n  ...\n  ]","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"is used to add data to standard components. In this example, the data dictionary for component will be augmented with fields called data_field_name1, data_field_name2, etc. The names trailing the keyword %column_name% are used as the keys in the data dictionary for each component. The key word mpc.component_data is used to indicate the component the new data should be associated with.  For example, mpc.pipe_data adds the data to pipes. The data should be listed in the same order as used by the tables that specify the required data for the component. The syntax","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"  %column_names% data_field_name1, data_field_name2, ...\n  mpc.component = [\n  data1, data2\n  data1, data2\n  ...\n  ]","category":"page"},{"location":"data-format/","page":"Input Data Formats","title":"Input Data Formats","text":"is then used to specify completely new components which are not specified in the default format. This example would create an entry from components called component in the data dictionary.","category":"page"},{"location":"network-data/#PetroleumModels-Network-Data-Format","page":"Network Data Format","title":"PetroleumModels Network Data Format","text":"","category":"section"},{"location":"network-data/#The-Network-Data-Dictionary","page":"Network Data Format","title":"The Network Data Dictionary","text":"","category":"section"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"Internally PetroleumModels utilizes a dictionary to store network data. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. PetroleumModels can utilize this serialization as a text file, however PetroleumModels does not support backwards compatibility for such serializations. When used as serialization, the data is assumed to be in per_unit (non dimenisionalized) or SI units.","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"The network data dictionary structure is roughly as follows:","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"{\n\"name\":<string>,                         # a name for the model\n\"density\":<float>,                       # petroleum density, kg per cubic m\n\"viscosity\":<float>,                     # petroleum viscosity, squared m per second\n\"gravitational_acceleration\":<float>,    # accerlation due to gravity, squared m per second\n\"base_head\":<float>,                     # Base for non-dimensionalizing head. SI units are m\n\"base_length\":<float>,                   # Base for non-dimensionalizing length. SI units are m\n\"base_flow\":<float>,                     # Base for non-dimensionalizing flow. SI units are m^3/s\n\"units\":<string>,                        # Non-dimensonilized units. Options are \"si\" and \"asu\"\n\"is_per_unit\":<string>,                  # Whether or not the file is in per unit (non dimensional units) or SI units.\n\"time_step\":<int>,                       # size of the time step.\n\"junction\":{\n    \"1\":{\n      \"type\": <int> ,         # the type of the junction\n      \"head_min\": <float>,    # minimum head. SI units are meters\n      \"head_max\": <float>,    # maximum head. SI units are meters\n      \"elevation\":<float>,    # elevation of the junction. SI units are meters\n      \"status\": <int>,        # status of the component (0 = off, 1 = on). Default is 1.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"consumer\":{\n    \"1\":{\n      \"junction_id\": <float>,        # junction id\n      \"withdrawal_max\": <float>,     # the maximum mass flow demand. SI units are m^3/s.\n      \"withdrawal_min\": <float>,     # the minimum mass flow demand. SI units are m^3/s.\n      \"withdrawal_nominal\": <float>, # nominal mass flow demand. SI units are m^3/s.\n      \"bid_price\": <float>,          # price for buying gas at the delivery. SI units are $/m^3\n      \"is_dispatchable\": <int>,      # whether or not the unit is dispatchable (0 = consumer should consume withdrawl_nominal, 1 = consumer can consume between withdrawal_min and withdrawal_max).\n      \"status\": <int>,               # status of the component (0 = off, 1 = on). Default is 1.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"producer\":{\n    \"1\":{\n      \"junction_id\": <float>,         # junction id\n      \"injection_min\": <float>,       # the minimum mass flow gas production. SI units are kg/s.\n      \"injection_max\": <float>,       # the maximum mass flow gas production. SI units are kg/s.\n      \"injection_nominal\": <float>,   # nominal mass flow production at standard density. SI units are kg/s.\n      \"dispatchable\": <int>,          # whether or not the unit is dispatchable (0 = receipt should produce injection_nominal, 1 = receipt can produce between injection_min and injection_max).\n      \"offer_price\": <float>,         # price for selling gas at the receipt.\n      \"status\": <int>,                # status of the component (0 = off, 1 = on). Default is 1.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"pipe\":{\n    \"1\":{\n      \"length\": <float>,            # the length of the connection. SI units are m.\n      \"fr_junction\": <int>,         # the \"from\" side junction id\n      \"to_junction\": <int>,         # the \"to\" side junction id\n      \"friction_factor\": <float>,   # the friction component of the resistance term of the pipe. SI units are s^2/ft.\n      \"diameter\": <float>,          # the diameter of the connection. SI units are m.\n      \"status\": <int>,              # status of the component (0 = off, 1 = on). Default is 1.\n      \"flow_max\": <float>,          # maximum volumetric flow. SI units are m^3/s\n      \"flow_min\": <float>,          # minimum volumetric flow. SI units are m^3/s\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"pump\":{\n    \"1\":{\n      \"fr_junction\": <int>,                           # the \"from\" side junction id\n      \"to_junction\": <int>,                           # the \"to\" side junction id\n      \"status\": <int>,                                # status of the component (0 = off, 1 = on). Default is 1.\n      \"electricity_price\": <float>,                   # the cost per kW of running the compressor\n      \"station_i\": <int>,                             # the pump station id for this pumps\n      \"rotation_coefficient\": <float>,                # pump rotation coefficient, SI units are m\n      \"flow_coefficient\": <float>,                    # pump flow coefficient, SI units are s^2/m^5\n      \"flow_nom\": <float>,                            # normal flow through the pump. SI units are m^3/s\n      \"flow_max\": <float>,                            # maximum flow through the pump. SI units are m^3/s\n      \"delta_head_min\": <float>,                      # minimum pressure difference through the pump. SI units are m.\n      \"delta_head_max\": <float>,                      # maximum pressure difference through the pump. SI units are m.\n      \"pump_efficiency_min\": <float>,                 # minimum pump efficiency. Non dimensional\n      \"pump_efficiency_max\": <float>,                 # maximum pump efficiency. Non dimensional\n      \"rotation_nom\": <float>,                        # normal rotation speed. SI units are rotations per second\n      \"rotation_min\": <float>,                        # minimum rotation speed. SI units are rotations per second\n      \"rotation_max\": <float>,                        # maximum rotation speed. SI units are rotations per second\n      \"electric_motor_efficiency\": <float>,           # efficiency of the pump's motor. Non dimensional.\n      \"mechanical_transmission_efficiency\": <float>,  # efficiency of the pump's transmission. Non dimensional.\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"tank\":{\n    \"1\":{\n      \"fr_junction\": <int>,              # the \"from\" side junction id\n      \"to_junction\": <int>,              # the \"to\" side junction id\n      \"status\": <int>,                   # status of the component (0 = off, 1 = on). Default is 1.\n      \"vessel_pressure_head\": <float>,   # TODO\n      \"radius\": <float>,                 # radius of the tank. SI units are m.\n      \"capacity_min\": <float>,           # minimum capcity of the tank. SI units are m^3.\n      \"capacity_max\": <float>,           # maximum capcity of the tank. SI units are m^3.\n      \"initial_volume\": <float>,         # initial volume of the tank. SI units are m^3.\n      \"intake_min\": <float>,             # minimum flow into the tank. SI units are m^3/s.\n      \"intake_max\": <float>,             # maximum flow into the tank. SI units are m^3/s.\n      \"offtake_min\": <float>,            # minimum flow out of the tank. SI units are m^3/s.\n      \"offtake_max\": <float>,            # maximum flow out of the tank. SI units are m^3/s.\n      \"Cd\": <float>,                     # Todo\n      \"price\": <float>,                  # Todo\n      \"p_price\": <float>,                # Todo\n        ...\n    },\n    \"2\":{...},\n    ...\n  },\n}","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"All data is assumed to have consistent units (i.e. SI units or non-dimensionalized units)","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"The following commands can be used to explore the network data dictionary,","category":"page"},{"location":"network-data/","page":"Network Data Format","title":"Network Data Format","text":"network_data = PetroleumModels.parse_file(\"case5.m\")\ndisplay(network_data)","category":"page"},{"location":"developer/#Developer-Documentation","page":"Developer","title":"Developer Documentation","text":"","category":"section"},{"location":"developer/#Variable,-constraint-and-parameter-naming-scheme","page":"Developer","title":"Variable, constraint and parameter naming scheme","text":"","category":"section"},{"location":"developer/#Head-variables","page":"Developer","title":"Head variables","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"h: head","category":"page"},{"location":"developer/#Flow-variables","page":"Developer","title":"Flow variables","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"q: volume flow\nql: volume flow consumption\nqg: volume flow production","category":"page"},{"location":"developer/#Pump-variables","page":"Developer","title":"Pump variables","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"eta: pump efficiency\nw: pump rotational speed","category":"page"},{"location":"developer/#Developing-steady-state-problems-and-formulations","page":"Developer","title":"Developing steady-state problems and formulations","text":"","category":"section"},{"location":"developer/","page":"Developer","title":"Developer","text":"In the current version of PetroleumModels, the supported variable space is head (h), pump efficiency (eta), pump rotational speed (w) and volume flow (q) for steady-state modeling. Most steady-state models use/assume the single network formulation, that is not discretized in time or space. Thus, petroleum network models are read in and directly used by steady-state specifications.","category":"page"},{"location":"parser/#File-IO","page":"File IO","title":"File IO","text":"","category":"section"},{"location":"parser/","page":"File IO","title":"File IO","text":"CurrentModule = PetroleumModels","category":"page"},{"location":"parser/#General-Data-Formats","page":"File IO","title":"General Data Formats","text":"","category":"section"},{"location":"parser/","page":"File IO","title":"File IO","text":"The json file format is a direct JSON serialization of PetroleumModels internal data model. As such, the json file format is intended to be a temporary storage format. PetroleumModels does not maintain backwards compatibility with serializations of earlier versions of the Petroleum Models internal data model.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"parse_file\nparse_json","category":"page"},{"location":"parser/#PetroleumModels.parse_file","page":"File IO","title":"PetroleumModels.parse_file","text":"parse_file(io)\n\nParses the IOStream of a file into a Models data structure.\n\n\n\n\n\n\n\n\n\n","category":"function"},{"location":"parser/#Matpetro-Data-Files","page":"File IO","title":"Matpetro Data Files","text":"","category":"section"},{"location":"parser/","page":"File IO","title":"File IO","text":"The following method is the main methods for parsing Matpetro data files:","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"parse_matpetro","category":"page"},{"location":"parser/#PetroleumModels.parse_matpetro","page":"File IO","title":"PetroleumModels.parse_matpetro","text":"Parses the matpetroleum data from either a filename or an IO object\n\n\n\n\n\n","category":"function"},{"location":"parser/","page":"File IO","title":"File IO","text":"We also provide the following (internal) helper methods:","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Modules = [PetroleumModels]\nPages   = [\"io/matpetro.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"parser/#PetroleumModels._get_default","page":"File IO","title":"PetroleumModels._get_default","text":"Get a default value for dict entry\n\n\n\n\n\n","category":"function"},{"location":"parser/#PetroleumModels._matpetroleum_to_petroleummodels-Tuple{Dict{String,Any}}","page":"File IO","title":"PetroleumModels._matpetroleum_to_petroleummodels","text":"Converts a matpetroleum dict into a PowerModels dict\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels._merge_generic_data!-Tuple{Dict{String,Any}}","page":"File IO","title":"PetroleumModels._merge_generic_data!","text":"merges Matlab tables based on the table extension syntax\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels._petroleummodels_to_matpetroleum_string-Tuple{Dict{String,Any}}","page":"File IO","title":"PetroleumModels._petroleummodels_to_matpetroleum_string","text":"write to matpetroleum\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels.parse_m_file-Tuple{IO}","page":"File IO","title":"PetroleumModels.parse_m_file","text":"parses matlab-formatted .m file\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels.parse_m_file-Tuple{String}","page":"File IO","title":"PetroleumModels.parse_m_file","text":"parses matlab-formatted .m file\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels.parse_m_string-Tuple{String}","page":"File IO","title":"PetroleumModels.parse_m_string","text":"parses matlab-format string\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels.parse_matpetro-Tuple{Union{IO, String}}","page":"File IO","title":"PetroleumModels.parse_matpetro","text":"Parses the matpetroleum data from either a filename or an IO object\n\n\n\n\n\n","category":"method"},{"location":"parser/#PetroleumModels.write_matpetroleum!-Tuple{Dict{String,Any},String}","page":"File IO","title":"PetroleumModels.write_matpetroleum!","text":"writes data structure to matlab format\n\n\n\n\n\n","category":"method"},{"location":"parser/","page":"File IO","title":"File IO","text":"This format was designed to have a similar look a feel to the Matlab MatPower format (in the case of PetroleumModels, we refer to it as the MatPetro format), however, it standardizes around data requirements developed by the PetroleumModels development team. It is largely stable. Additional fields for each component in the MatPetro format can be incorporated using the Matlab extensions developed in InfrastructureModels.jl.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The top of the file contains global information about the network like its name, liquid density, etc.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"function mpc = case5\n\nmpc.density                    = 827;     % petroleum density, kg per cubic m\nmpc.viscosity                  = 4.9e-6;  % petroleum viscosity, squared m per second\nmpc.gravitational_acceleration = 9.8;\nmpc.base_head                  = 100;     % base head, m\nmpc.base_length                = 542;     % m\nmpc.base_flow                  = 0.5;     % petroleum volume flow rate, m3 per hour\nmpc.units                      = 'si';\nmpc.is_per_unit                = 0;\nmpc.time_step                  = 0;","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Junction data is defined with the following tabular format","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%% junction data\n%  junction_i type head_min head_max elevation status\nmpc.junction = [\n...\n]","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The reader is referred to Matpetro Format (.m) for a detailed description of each column in the above table.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Pipeline data is defined with the following tabular format","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%% pipe data\n% pipeline_i fr_junction to_junction diameter length flow_min flow_max friction_factor status\nmpc.pipe = [\n...\n]","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The reader is referred to Matpetro Format (.m) for a detailed description of each column in the above table.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Pump data is defined with the following tabular format","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%% pump data\n% pump_i fr_junction to_junction station_i rotation_coefficient flow_coefficient flow_nom flow_max delta_head_min delta_head_max pump_efficiency_min pump_efficiency_max rotation_nom rotation_min rotation_max electricity_price status electric_motor_efficiency mechanical_transmission_efficiency\nmpc.pump = [\n...","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The reader is referred to Matpetro Format (.m) for a detailed description of each column in the above table.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Producer data is defined with the following tabular format","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%% producer data\n% producer_i junction injection_min injection_max injection_nominal status dispatchable offer_price\nmpc.producer = [\n...","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The reader is referred to Matpetro Format (.m) for a detailed description of each column in the above table.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Consumer data is defined with the following tabular format","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%% consumer data\n% consumer_i junction withdrawal_min withdrawal_max withdrawal_nominal status dispatchable bid_price\nmpc.consumer = [\n...","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The reader is referred to Matpetro Format (.m) for a detailed description of each column in the above table.","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"Tank data is defined with the following tabular format","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"%% tank data\n% tank_i fr_junction to_junction vessel_pressure_head radius capacity_min capacity_max initial_volume intake_min intake_max offtake_min offtake_max Cd status price p_price\nmgc.tank = [\n...","category":"page"},{"location":"parser/","page":"File IO","title":"File IO","text":"The reader is referred to Matpetro Format (.m) for a detailed description of each column in the above table.","category":"page"},{"location":"ss-specifications/#Steady-State-Problem-Specifications","page":"Problem Specifications","title":"Steady State Problem Specifications","text":"","category":"section"},{"location":"ss-specifications/#Optimal-Petroleum-Flow-(OPF)","page":"Problem Specifications","title":"Optimal Petroleum Flow (OPF)","text":"","category":"section"},{"location":"ss-specifications/#Variables","page":"Problem Specifications","title":"Variables","text":"","category":"section"},{"location":"ss-specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"variable_head(pm)\nvariable_volume_flow_pipe(pm)\nvariable_volume_flow_pump(pm)\nvariable_pump_rotation(pm)\nvariable_pump_efficiency(pm)\nvariable_production_volume_flow(pm)\nvariable_demand_volume_flow(pm)\nvariable_tank_intake(pm)\nvariable_tank_offtake(pm)","category":"page"},{"location":"ss-specifications/#Objective","page":"Problem Specifications","title":"Objective","text":"","category":"section"},{"location":"ss-specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"objective_min_expenses_max_benefit(pm)","category":"page"},{"location":"ss-specifications/#Constraints","page":"Problem Specifications","title":"Constraints","text":"","category":"section"},{"location":"ss-specifications/","page":"Problem Specifications","title":"Problem Specifications","text":"for i in ids(pm, :pipe)\n    constraint_leibenzon(pm, i)\nend\n\nfor i in ids(pm, :pump)\n    constraint_pump_head_difference_bounds(pm, i)\n    constraint_pump_efficiency(pm, i)\n    constraint_pump_head_difference(pm,i)\nend\n\nfor i in ids(pm, :junction)\n    constraint_junction_volume_flow_balance(pm, i)\nend","category":"page"},{"location":"quickguide/#Quick-Start-Guide","page":"Getting Started","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Once Petroleum Models is installed, Ipopt is installed, and a network data file (e.g. \"test/data/case5.m\") has been acquired, a Petroleum Flow can be executed with,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"using PetroleumModels\nusing Ipopt\nusing JuMP\n\nipopt_solver = JuMP.optimizer_with_attributes(\n    Ipopt.Optimizer,\n    \"print_level\" => 5,\n    \"tol\" => 1e-10,\n)\n\nPetroleumModels.run_opf(\"test/data/case5.m\", LPPetroleumModel, ipopt_solver)","category":"page"},{"location":"quickguide/#Getting-Results","page":"Getting Started","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The run commands in PetroleumModels return detailed results data in the form of a dictionary. This dictionary can be saved for further processing as follows,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result = PetroleumModels.run_opf(\"test/data/case5.m\", LPPetroleumModel, ipopt_solver)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For example, the algorithm's runtime, final objective value, and status can be accessed with,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"result[\"solve_time\"]\nresult[\"objective\"]\nresult[\"termination_status\"]","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The \"solution\" field contains detailed information about the solution produced by the run method. For example, the following dictionary comprehension can be used to inspect the junction pressures in the solution,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"Dict(name => data[\"h\"] for (name, data) in result[\"solution\"][\"junction\"])","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For more information about PetroleumModels result data see the PetroleumModels Result Data Format section.","category":"page"},{"location":"quickguide/#Accessing-Different-Formulations","page":"Getting Started","title":"Accessing Different Formulations","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The generic run_opf() allows one to solve a petroleum optimal flow problem with any petroleum network formulation implemented in PetroleumModels.  For example, the full non convex Petroleum Flow can be run with,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"run_opf(\"test/data/case5.m\", LPPetroleumModel, ipopt_solver)","category":"page"},{"location":"quickguide/#Modifying-Network-Data","page":"Getting Started","title":"Modifying Network Data","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates one way to perform multiple PetroleumModels solves while modify the network data in Julia,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"network_data = PetroleumModels.parse_file(\"test/data/case5.m\")\n\nrun_opf(network_data, LPPetroleumModel, ipopt_solver)\n\nnetwork_data[\"junction\"][\"24\"][\"head_min\"] = 0.0\n\nrun_opf(network_data, LPPetroleumModel, ipopt_solver)","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"For additional details about the network data, see the PetroleumModels Network Data Format section.","category":"page"},{"location":"quickguide/#Inspecting-the-Formulation","page":"Getting Started","title":"Inspecting the Formulation","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The following example demonstrates how to break a run_opf call into separate model building and solving steps.  This allows inspection of the JuMP model created by PetroleumModels for the petroleum flow problem,","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"pm = instantiate_model(\"test/data/case5.m\", LPPetroleumModel, PetroleumModels.build_opf)\nprint(pm.model)\nJuMP.set_optimizer(pm.model, ipopt_solver)\nJuMP.optimize!(pm.model, ipopt_solver)","category":"page"},{"location":"quickguide/#Solution-conversion","page":"Getting Started","title":"Solution conversion","text":"","category":"section"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"The default behavior of PetroleumModels produces solution results in non-dimensionalized units. To recover solutions in SI units, the following function can be used","category":"page"},{"location":"quickguide/","page":"Getting Started","title":"Getting Started","text":"PetroleumModels.make_si_units!(result[\"solution\"])","category":"page"},{"location":"constraints/#Constraints","page":"Constraints","title":"Constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"CurrentModule = PetroleumModels","category":"page"},{"location":"constraints/#Constraint-Templates","page":"Constraints","title":"Constraint Templates","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"Constraint templates help simplify data wrangling across multiple Petro Flow formulations by providing an abstraction layer between the network data and network constraint definitions. The constraint template's job is to extract the required parameters from a given network data structure and pass the data as named arguments to the Petroleum Flow formulations.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"These templates should be defined over AbstractPetroleumModel and should not refer to model variables. For more details, see the files: core/constraint_template.jl and core/constraint.jl.","category":"page"},{"location":"constraints/#Junction-Constraints","page":"Constraints","title":"Junction Constraints","text":"","category":"section"},{"location":"constraints/#Volume-flow-balance-constraints","page":"Constraints","title":"Volume flow balance constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"The primary constraints related to junctions ensure that volume flow is balanced at these nodes.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"constraint_junction_volume_flow_balance","category":"page"},{"location":"constraints/#PetroleumModels.constraint_junction_volume_flow_balance","page":"Constraints","title":"PetroleumModels.constraint_junction_volume_flow_balance","text":"Constraint for balancing volumetric flow a function (nodes) \n\n\n\n\n\nConstraint for balancing volumetric flow at junctions (nodes) in the pipeline system.  Given junction i, this constraint takes the form of sum_j in Producers_i qg_j - sum_j in Consumers_i ql_j = sum_ij in Pipes^f_ij q_ij - sum_ij in Pipes^t_ji q_ji +   sum_ij in Pumps^f_ij q_ij - sum_ij in Pumps^t_ji q_ji + sum_ij in Tanks^f_ij q_ij - sum_ij in Tanks^t_ji q_ji  where qg and ql includes variable and constant demand and production as defined by the is_dispatchable flag\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Pipe-Constraints","page":"Constraints","title":"Pipe Constraints","text":"","category":"section"},{"location":"constraints/#Bernoulli-equation","page":"Constraints","title":"Bernoulli equation","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"The primary constraints related to pipes ensure that that head change and flow across a pipe is represented by Bernoulli equation. In this constraint head loss across a pipe is related through the Leibenzon relationship.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"constraint_leibenzon","category":"page"},{"location":"constraints/#PetroleumModels.constraint_leibenzon","page":"Constraints","title":"PetroleumModels.constraint_leibenzon","text":"Leibenzon model for pipeline physics \n\n\n\n\n\nConstraint for computing the relationship between volumetric flow and head difference at either end of a pipe.  For a pipe (ij), this constraint is computed as (h_i - h_j) = (z_j - z_i) + fracbeta * nu^mD_ij^50-m * L_ij * 102 * q_ij^20-m. The constraint adopts the Leibenzon model\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Pump-Constraints","page":"Constraints","title":"Pump Constraints","text":"","category":"section"},{"location":"constraints/#Operation-constraints","page":"Constraints","title":"Operation constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"The primary constraints related to pumps ensure that the pumps operate within the limits of their capability (head difference, volume flow, rotational speed and pump efficiency).","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"constraint_pump_head_difference_bounds\nconstraint_pump_efficiency\nconstraint_pump_head_difference","category":"page"},{"location":"constraints/#PetroleumModels.constraint_pump_head_difference_bounds","page":"Constraints","title":"PetroleumModels.constraint_pump_head_difference_bounds","text":"constraints that limit pump head difference\n\n\n\n\n\nConstraints that bound the head difference when fluids are pushed through a pump underlineh_ij le h_j - h_i le overlineh_ij\n\n\n\n\n\n","category":"function"},{"location":"constraints/#PetroleumModels.constraint_pump_efficiency","page":"Constraints","title":"PetroleumModels.constraint_pump_efficiency","text":"constraint for computing the efficiency of the pump\n\n\n\n\n\nConstraint for computing the efficiency of a pump eta = overlineeta - (fracq_ijhatq_ij -  fracw_ijhatw_ij)^2 * (frachatww_ij)^2 * overlineeta)\n\n\n\n\n\n","category":"function"},{"location":"constraints/#PetroleumModels.constraint_pump_head_difference","page":"Constraints","title":"PetroleumModels.constraint_pump_head_difference","text":"Constraints for computing the head difference for a pump \n\n\n\n\n\nConstraint for computing the head difference when pushing fluids through a pump h_j - h_i = fracw_ijhatw_ij^2 * a -  q_ij^2 * b\n\n\n\n\n\n","category":"function"},{"location":"constraints/#Tank-Constraints","page":"Constraints","title":"Tank Constraints","text":"","category":"section"},{"location":"constraints/#Flow-balance-constraints","page":"Constraints","title":"Flow balance constraints","text":"","category":"section"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"Tanks are used to model storage nodes in a pipeline system. The primary constraint ensures the head and flow on both sides of tanks are within the limits capability of the tank's intake and offtake pipes.","category":"page"},{"location":"constraints/","page":"Constraints","title":"Constraints","text":"constraint_tank_volume_balance","category":"page"},{"location":"result-data/#PetroleumModels-Result-Data-Format","page":"Result Data Format","title":"PetroleumModels Result Data Format","text":"","category":"section"},{"location":"result-data/#The-Result-Data-Dictionary","page":"Result Data Format","title":"The Result Data Dictionary","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"PetroleumModels utilizes a dictionary to organize the results of a run command. The dictionary uses strings as key values so it can be serialized to JSON for algorithmic data exchange. The data dictionary organization is designed to be consistent with the PetroleumModels The Network Data Dictionary.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"At the top level the results data dictionary is structured as follows:","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n\"optimizer\":<string>,        # name of the Julia class used to solve the model\n\"termination_status\":<type>, # optimizer status at termination\n\"dual_status\":<type>,        # optimizer dual status at termination\n\"primal_status\":<type>,      # optimizer primal status at termination\n\"solve_time\":<float>,        # reported solve time (seconds)\n\"objective\":<float>,         # the final evaluation of the objective function\n\"objective_lb\":<float>,      # the final lower bound of the objective function (if available)\n\"objective_gap\":<float>,     # the final gap between the lower bound and upper bound of the objective function (if available)\n\"machine\":{...},             # computer hardware information (details below)\n\"data\":{...},                # test case information (details below)\n\"solution\":{...}             # complete solution information (details below)\n}","category":"page"},{"location":"result-data/#Machine-Data","page":"Result Data Format","title":"Machine Data","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"This object provides basic information about the hardware that was used when the run command was called.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n\"cpu\":<string>,    # CPU product name\n\"memory\":<string>  # the amount of system memory (units given)\n}","category":"page"},{"location":"result-data/#Case-Data","page":"Result Data Format","title":"Case Data","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"This object provides basic information about the network cases that was used when the run command was called.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n\"name\":<string>,                # the name from the network data structure\n}","category":"page"},{"location":"result-data/#Solution-Data","page":"Result Data Format","title":"Solution Data","text":"","category":"section"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"The solution object provides detailed information about the solution produced by the run command.  The solution is organized similarly to The Network Data Dictionary with the same nested structure and parameter names, when available.  A network solution most often only includes a small subset of the data included in the network data.","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"For example the data for a junction, data[\"junction\"][\"1\"] is structured as follows,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n\"head_min\": 25.0,\n\"head_max\": 50.0,\n\"elevation\": 20.0,\n...\n}","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"A solution specifying a pressure for the same case, i.e. result[\"solution\"][\"junction\"][\"1\"], would result in,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n\"h\": 21.0,\n}","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"Because the data dictionary and the solution dictionary have the same structure InfrastructureModels update_data! helper function can be used to update a data dictionary with the values from a solution as follows,","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"InfrastructureModels.update_data!(data, result[\"solution\"])","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"By default, all results are reported in per-unit (non-dimenionalized). Below are common outputs of implemented optimization models","category":"page"},{"location":"result-data/","page":"Result Data Format","title":"Result Data Format","text":"{\n\"junction\":{\n    \"1\":{\n      \"h\": <float>,      # head. Non-dimensional quantity. Multiply by base_head to get meters\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"consumer\":{\n    \"1\":{\n      \"ql\": <float>,  # variable volumetric flow consumed. Non-dimensional quantity. Multiply by base_flow to get m^3/s.\n       ...\n    },\n    \"2\":{...},\n    ...\n},\n\"receipt\":{\n    \"1\":{\n      \"qg\": <float>,  # variable volumetric flow produced. Non-dimensional quantity. Multiply by base_flow to get m^3/s.\n    },\n    \"2\":{...},\n    ...\n},\n\"pipe\":{\n    \"1\":{\n      \"q\": <float>,  # volumetric flow through the pipe.  Non-dimensional quantity. Multiply by base_flow to get m^3/s.\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"tank\":{\n    \"1\":{\n      \"qin\": <float>,    # volumetric flow into the tank.  Non-dimensional quantity. Multiply by base_flow to get m^3/s.\n      \"qout\": <float>,   # volumetric flow out of the tank.  Non-dimensional quantity. Multiply by base_flow to get m^3/s.\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n\"pump\":{\n    \"1\":{\n      \"q\": <float>,    # volumetric flow through the pump.  Non-dimensional quantity. Multiply by base_flow to get m^3/s.\n      \"eta\": <float>,  # pump efficiency. Non-dimensional quantiy.\n      \"w\": <float>,    # pump rotation speed in rotations per second.\n        ...\n    },\n    \"2\":{...},\n    ...\n},\n}","category":"page"},{"location":"formulations/#Petroleum-Model","page":"Network Formulations","title":"Petroleum Model","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"CurrentModule = PetroleumModels","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"All methods for constructing PetroleumModels should be defined on the following type:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"AbstractPetroleumModel","category":"page"},{"location":"formulations/#PetroleumModels.AbstractPetroleumModel","page":"Network Formulations","title":"PetroleumModels.AbstractPetroleumModel","text":"root of the petroleum formulation hierarchy\n\n\n\n\n\n","category":"type"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"which utilizes the following (internal) functions:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"build_ref","category":"page"},{"location":"formulations/#PetroleumModels.build_ref","page":"Network Formulations","title":"PetroleumModels.build_ref","text":"Builds the ref dictionary from the data dictionary. Additionally the ref dictionary would contain fields populated by the optional vector of ref_extensions provided as a keyword argument.\n\n\n\n\n\n","category":"function"},{"location":"formulations/#Network-Formulations","page":"Network Formulations","title":"Network Formulations","text":"","category":"section"},{"location":"formulations/#Type-Hierarchy","page":"Network Formulations","title":"Type Hierarchy","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"We begin with the top of the hierarchy, where we can distinguish between the physics of petroleum flow models. There is currently one formulation supported in PetroleumModels, a full non convex formulation.","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"AbstractLPModel <: AbstractPetroleumModel","category":"page"},{"location":"formulations/#Petroleum-Models","page":"Network Formulations","title":"Petroleum Models","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Each of these forms can be used as the type parameter for a PetroleumModel, i.e.:","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"LPPetroleumModel <: AbstractLPForm","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"For details on AbstractPetroleumModel, see the section on Petroleum Model.","category":"page"},{"location":"formulations/#User-Defined-Abstractions","page":"Network Formulations","title":"User-Defined Abstractions","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"The user-defined abstractions begin from a root abstract like the AbstractPetroleumModel abstract type, i.e.","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"AbstractMyFooModel <: AbstractPetroleumModel\n\nStandardMyFooForm <: AbstractFooModel\nFooPetroleumModel = AbstractPetroleumModel{StandardFooForm}","category":"page"},{"location":"formulations/#Supported-Formulations","page":"Network Formulations","title":"Supported Formulations","text":"","category":"section"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"All formulation names refer to how underlying physics of a gas network is modeled. For example, the LP model uses a non convex form of the Bernoulli equations using the Leibenzon relationship.","category":"page"},{"location":"formulations/","page":"Network Formulations","title":"Network Formulations","text":"Formulation Steady-State Transient Description\nLP Y Y Physics is modeled using nonlinear equations.","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"We provide the following methods to provide a compositional approach for defining common variables used in petroleum flow models. These methods should always be defined over \"AbstractPetroleumModel\".","category":"page"},{"location":"variables/","page":"Variables","title":"Variables","text":"Modules = [PetroleumModels]\nPages   = [\"core/variable.jl\"]\nOrder   = [:type, :function]\nPrivate  = true","category":"page"},{"location":"variables/#PetroleumModels.variable_demand_volume_flow","page":"Variables","title":"PetroleumModels.variable_demand_volume_flow","text":"Variables associated with volume demand: ql\n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_head","page":"Variables","title":"PetroleumModels.variable_head","text":"variables associated with head: h \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_production_volume_flow","page":"Variables","title":"PetroleumModels.variable_production_volume_flow","text":"Variables associated with volume production: qg \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_pump_efficiency","page":"Variables","title":"PetroleumModels.variable_pump_efficiency","text":"Variables associated with pump efficiency: eta \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_pump_rotation","page":"Variables","title":"PetroleumModels.variable_pump_rotation","text":"Variables associated with pump rotation: w \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_tank_intake","page":"Variables","title":"PetroleumModels.variable_tank_intake","text":"variables associated with tank intake: qin \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_tank_offtake","page":"Variables","title":"PetroleumModels.variable_tank_offtake","text":"variables associated with tank offtake: qoff \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_volume_flow_pipe","page":"Variables","title":"PetroleumModels.variable_volume_flow_pipe","text":"Variables associated with volume flow through a pipe: q \n\n\n\n\n\n","category":"function"},{"location":"variables/#PetroleumModels.variable_volume_flow_pump","page":"Variables","title":"PetroleumModels.variable_volume_flow_pump","text":"Variables associated with volume flow through a pump: q \n\n\n\n\n\n","category":"function"},{"location":"transient-specifications/","page":"Transient Specifications","title":"Transient Specifications","text":"Future versions of PetroleumModels will support transient formulations akin to those found in GasModels.jl","category":"page"},{"location":"examples/#Examples-Documentation","page":"Examples","title":"Examples Documentation","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"The test/data folder contains a library network instances which have been developed in the literature.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"These examples can be run using the opf.jl script which executes various problems and formulations on the library of instances and verifies that PetroleumModels returns solutions which were reported in the literature.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Long term, the plan is to move the examples out of the PetroleumModels repository and maintain a special PetroleumModelsLib repository specifically for warehousing models developed in the literature.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"Problems Source\ncase_tank [1]\ncase_bekker [2]\ncaseonepipe [1]\ncase_seaway [3]\ncase5 [1]","category":"page"},{"location":"examples/#Sources","page":"Examples","title":"Sources","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"[1] Unknown","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[2] Bekker L.M., Shtukaturov K.Y. \"The Calculation of the Optimal Mode of Operation of the Oil Pipeline, Equipped with Frequency-Controlled Actuator\" (in Russian). JSC Giprotruboprovod, 3 (11): 27-33, 2013.","category":"page"},{"location":"examples/","page":"Examples","title":"Examples","text":"[3] https://www.seawaypipeline.com/faqs/ as implemented in E. Khlebnikova, K. Sundar, A. Zlotnik, R. Bent, M. Ewers, and B. Tasseff. \"Optimal Economic Operation of Liquid Petroleum Products Pipeline Systems\", AIChE Journal, forthcoming","category":"page"},{"location":"objective/#Objective","page":"Objective","title":"Objective","text":"","category":"section"},{"location":"objective/","page":"Objective","title":"Objective","text":"Modules = [PetroleumModels]\nPages   = [\"core/objective.jl\"]\nOrder   = [:function]\nPrivate  = true","category":"page"},{"location":"objective/#PetroleumModels.objective_min_expenses_max_benefit","page":"Objective","title":"PetroleumModels.objective_min_expenses_max_benefit","text":"Economic objective function for petroleum models that takes the form of min sum_i in producer c_i - sum_i in consumer c_i + fracrho * g1000 * sum_ij in pump c_ij * q_ij * frac(h_i - h_j)eta_ij * eta_em * etaet where 1000 is the factor to convert kw seconds into Joules (kg * m^2)/s.\n\n\n\n\n\n","category":"function"},{"location":"#PetroleumModels.jl-Documentation","page":"Home","title":"PetroleumModels.jl Documentation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PetroleumModels","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PetroleumModels.jl is a Julia/JuMP package for Petroleum Network Optimization. It provides utilities for parsing and modifying network data (see PetroleumModels Network Data Format for details), and is designed to enable computational evaluation of emerging petroleum network formulations and algorithms in a common platform. It includes support for steady-state formulations.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The code is engineered to decouple Steady State Problem Specifications (e.g. Optimal Petroleum Flow, ...) from Network Formulations (e.g. LP, ...). This enables the definition of a wide variety of petroleum network formulations and their comparison on common problem specifications.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest stable release of PetroleumModels is installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"add PetroleumModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"For the current development version, \"checkout\" this package with","category":"page"},{"location":"","page":"Home","title":"Home","text":"checkout PetroleumModels","category":"page"},{"location":"","page":"Home","title":"Home","text":"At least one optimizer is required for running PetroleumModels.  The open-source optimizer Ipopt is recommended and can be used to solve a wide variety of the problems and network formulations provided in PetroleumModels.  The Ipopt optimizer can be installed via the package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"add Ipopt","category":"page"},{"location":"","page":"Home","title":"Home","text":"Test that the package works by running","category":"page"},{"location":"","page":"Home","title":"Home","text":"test PetroleumModels","category":"page"}]
}
